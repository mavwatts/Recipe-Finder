{"version":3,"sources":["recipe.module.css","Recipe.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","className","style","recipe","Math","round","map","ingredient","text","src","alt","FooterPagePro","color","backgroundColor","fluid","md","lg","xl","href","Date","getFullYear","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","type","value","onChange","target","key","label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fd394df2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"image\":\"recipe_image__BtdIE\"};","import React from 'react';\nimport style from './recipe.module.css'\n\nconst Recipe = ({title, calories, image, ingredients}) =>{\n    return(\n<div className={style.recipe}>\n    <h1>{title}</h1>\n    <h3>Calories</h3>\n    <p>{Math.round(calories)}</p>\n    <ol>\n        {ingredients.map(ingredient => (\n            <li>{ingredient.text}</li>\n        ))}\n    </ol>\n    <img className={style.image} src={image} alt=\"\"/>\n</div>\n    );\n}\n\nexport default Recipe;","import React from \"react\";\nimport { MDBCol, MDBContainer, MDBRow, MDBFooter } from \"mdbreact\";\nimport './Footer.css'\n\nconst FooterPagePro = () => {\n  return (\n    <MDBFooter color=\"unique-color-dark\" className=\"page-footer font-small pt-0\">\n      <div style={{ backgroundColor: \"#6351ce\" }}>\n        <MDBContainer fluid className=\"text-center text-md-left\">\n          <MDBRow className=\"py-4 d-flex align-items-center\">\n            <MDBCol md=\"6\" lg=\"5\" className=\"getconnectedbar\">\n              <h4 className=\"social\">\n                Get connected with us on social networks!\n              </h4>\n            </MDBCol>\n            <MDBCol md=\"6\" lg=\"7\" className=\"text-center text-md-right\">\n              <a className=\"fb-ic ml-0\">\n                <i className=\"fab fa-facebook-f white-text mr-lg-4\"> </i>\n              </a>\n              <a className=\"tw-ic\">\n                <i className=\"fab fa-twitter white-text mr-lg-4\"> </i>\n              </a>\n              <a className=\"gplus-ic\">\n                <i className=\"fab fa-google-plus-g white-text mr-lg-4\"> </i>\n              </a>\n              <a className=\"li-ic\">\n                <i className=\"fab fa-linkedin-in white-text mr-lg-4\"> </i>\n              </a>\n              <a className=\"ins-ic\">\n                <i className=\"fab fa-instagram white-text mr-lg-4\"> </i>\n              </a>\n            </MDBCol>\n          </MDBRow>\n        </MDBContainer>\n      </div>\n      <MDBContainer className=\" footernav\">\n        <MDBRow className=\"mt-3 rowcreator\">\n          <MDBCol md=\"3\" lg=\"4\" xl=\"3\" className=\"mb-4\">\n            <h4 className=\"text-uppercase font-weight-bold footernav\">\n              <strong>Menu Me</strong>\n            </h4>\n            <hr  />\n            <p className ='paragraphwrapper'>\n              Here you can use rows and columns here to organize your footer\n              content. Lorem ipsum dolor sit amet, consectetur adipisicing\n              elit.\n            </p>\n          </MDBCol>\n          <MDBCol md=\"2\" lg=\"2\" xl=\"2\" className=\"mb-4\">\n            <h4 className=\"text-uppercase font-weight-bold footernav\">\n              <strong>Products</strong>\n            </h4>\n            <hr />\n            <p>\n              <a href=\"#!\">MDBootstrap</a>\n            </p>\n            <p>\n              <a href=\"#!\">MDWordPress</a>\n            </p>\n            <p>\n              <a href=\"#!\">BrandFlow</a>\n            </p>\n            <p>\n              <a href=\"#!\">Bootstrap Angular</a>\n            </p>\n          </MDBCol>\n\n          <MDBCol md=\"3\" lg=\"2\" xl=\"2\" className=\"mb-4\">\n            <h4 className=\"text-uppercase font-weight-bold footernav\">\n              <strong>Useful links</strong>\n            </h4>\n            <hr />\n            <p>\n              <a href=\"#!\">Your Account</a>\n            </p>\n            <p>\n              <a href=\"#!\">Become an Affiliate</a>\n            </p>\n            <p>\n              <a href=\"#!\">Shipping Rates</a>\n            </p>\n            <p>\n              <a href=\"#!\">Help</a>\n            </p>\n          </MDBCol>\n          <MDBCol md=\"4\" lg=\"3\" xl=\"3\" className=\"mb-4\">\n            <h4 className=\"text-uppercase font-weight-bold footernav\">\n              <strong>Contact</strong>\n            </h4>\n            <hr />\n            <p>\n              <i className=\"fa fa-home mr-3\" /> Mavrick Watts\n            </p>\n            <p>\n              <i className=\"fa fa-envelope mr-3\" /> Indianapolis, IN 46219, US\n            </p>\n            <p>\n              <i className=\"fa fa-phone mr-3\" /> 317.691.XXXX\n            </p>\n           \n          </MDBCol>\n        </MDBRow>\n      </MDBContainer>\n      <div className=\"footer-copyright\">\n        <MDBContainer fluid>\n          &copy; {new Date().getFullYear()} Copyright: <a href=\"https://github.com/mavwatts\"> Mavrick Watts - Gitlab </a>\n        </MDBContainer>\n      </div>\n    </MDBFooter>\n  );\n}\n\nexport default FooterPagePro;","import React, { useEffect, useState } from \"react\";\nimport Recipe from \"./Recipe\";\nimport \"./App.css\";\nimport Footer from './Footer.js'\n\n//https://developer.edamam.com/edamam-docs-recipe-api reference\n\nconst App = () => {\n  const APP_ID = \"19a5b3a8\";\n  const APP_Key = \"1364092e44e2fc1200eeaf2a8a8c46ab\";\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\");\n\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_Key}`\n    );\n    const data = await response.json();\n    setRecipes(data.hits);\n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"navBar\">\n        <h1>Menu Me</h1>\n        <form onSubmit={getSearch} className=\"search-form\">\n          <input\n            className=\"search-bar\"\n            type=\"text\"\n            value={search}\n            onChange={updateSearch}\n          />\n          <button className=\"search-button\" type=\"submit\">\n            Search\n          </button>\n        </form>\n      </div>\n\n      <div className=\"recipes\">\n        {recipes.map(recipe => (\n          <Recipe\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n          />\n        ))}\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}